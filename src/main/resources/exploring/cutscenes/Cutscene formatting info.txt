Cutscene formatting - EXPLORING

NEW CUTSCENE
--------------------
[0] = cutscene, [1] = canReset (boolean), [2] = triggerObject (string), [3] = totalElementNr (in sheet)

* Each element in an area (except player) must have at least one cutscene
* The cutscenes must be ordered like their respective elements
    .E.g the third npc in the levelData-sheet will trigger the third 
    npc-Cutscene in the cutscene-sheet.


INFOBOX-EVENT
--------------------
[0] = infobox, [1] = text

* Max ~50 letters total per info
* Max 27 letters per word


INFO CHOICE
--------------------
[0] = infoChoice, [1] = question (String), [2] = leftAnswer, [3] = rightAnswer

* leftAnswer sends the player to the cutscene immediately after the one in question.
* rightAnswer sends the player to the cutscene 2 steps ahead.
* Both must have the same triggerObject as the original cutscene.


DIALOGUE-EVENT
--------------------
[0] = dialogue, [1] = characterName (String), [2] = emotion (not used for event), 
[3] = portraitIndex, [4] = speed (int), [5] = text (String)

* Max ~90 letters total per dialogue (see notes in DialogueBox)
* Max 32 letters per word


FADE
--------------------
[0] = fade, [1] = in/out (string), [2] = color (string), [3] = speed (int)
* Color = black | white


SET PLAYER VISIBLE
--------------------
[0] = setPlayerVisible, [1] = visible (boolean)


FILL SCREEN
--------------------
[0] = fillScreen, [1] = color (string), [2] = active (boolean)


FADE IN/OUT HEADER
--------------------
[0] = fadeHeader, [1] = in/out (string), [2] = y-pos, [3] = fadeSpeed, [4] = headerText


WAIT
--------------------
[0] = wait, [1] = nrOfFrames (int)

* This can also be used in order to advance events 
  that are not advanced automatically, if needed. 


SET OVERLAY IMAGE
--------------------
[0] = setOverlayImage, [1] = active (boolean), [2] = fileName (String)


SET STARTING CUTSCENE-INDEX FOR ELEMENT
--------------------
[0] = setStartCutscene, [1] = triggerObject (string), [2] = elementNrIndex (e.g door #0), 
[3] = newStartCutsceneIndex


SET REQUIREMENT MET
--------------------
[0] = setRequirementMet, [1] = doorIndex, [2] = requirementIndex


SET PLAYER SPRITESHEET
--------------------
[0] = setPlayerSheet, [1] = sheetIndex


PLAYER WALK
--------------------
[0] = playerWalk (string), [1] = direction (string), [2] = targetX, 
[3] = targetY, [4] = framesDuration


NPC WALK
--------------------
[0] = npcWalk (string), [1] = npcName (not used), [2] = npcIndex, 
[3] = direction (string), [4] = targetX, [5] = targetY, [6] = framesDuration
* npcIndex = e.g. npc #0


SET DIRECTION
--------------------
[0] = setDir, [1] = entityName (String), [2] = dir (String)


ADD TO INVENTORY  (items)
--------------------
[0] = addToInventory, [1] = itemName (String, capital letters), [2] = itemDescription,
[3] = imageFileName (String)

* Max 22 letter for itemName
* Max ~60 letters for itemDescription


UPDATE INVENTORY
--------------------
[0] = updateInventory, [1] = credits/bombs/health (String), [2] = amount (+/- int)


PURCHASE (check if player has enough credits)
--------------------
[0] = purchase, [1] = amountOfCredits

* If player has enough credits, cutscene +1 is started
* Else, cutscene +2 is started


GO TO FLYING 
--------------------
[0] = goToFlying (String), [1] = level


START SONG
--------------------
[0] = startSong (String), [1] = songIndex (int)
* This loops the song until it's stopped
* If used alone, it needs to be used together with the wait-method


STOP ALL LOOPS
--------------------
[0] = stopAllLoops (String)
* If used alone, it needs to be used together with the wait-method


FADE OUT LOOPS
--------------------
[0] = fadeOutLoops (String) 
* Must be used in combination with a method that calls advance(), like wait();


MUSIC ENABLED
--------------------
[0] = musicEnabled (String), [1] = enabled (boolean)
* This toggles whether music is started in the JustEntered-method.


START AMBIENCE
--------------------
[0] = startAmbience (String), [1] = ambienceIndex (int)
* This loops the ambience track until it's stopped
* 1 is rocketEngine
* If used alone, it needs to be used together with the wait-method


PLAY SFX
--------------------
[0] = playSFX (String), [1] = whichSfx (String / int)
* whichSfx = success/pickup/infoBox


SET SPRITE
--------------------
[0] = setSprite (String), [1] = entity (e.g. player / Oliver), [2] = poseActive (boolean)
[3] = colIndex, [4] = rowIndex, [5] = description
* Has to be used in combination with an action that calls advance(), like wait.
* After the posing is done, poseActive has to be set to false.


SCREEN SHAKE
--------------------
[0] = screenShake (String), [1] = duration (int)


SET RED LIGHT
--------------------
[0] = setRedLight (String), [1] = active (boolean)
* Needs to be turned off in a cutscene


MOVE CAMERA
--------------------
[0] = moveCamera (String), [1] = deltaX, [2] = deltaY, [3] = duration.
* OBS: remember to reattatch camera when cutscene is done.
* Use the same numbers when moving the camera back to starting position (due to rounding)


REATTATCH CAMERA
--------------------
[0] = reattatchCamera (String)


ADD ANIMATED OBJECT
--------------------
[0] = addObject (String), [1] = objectName (String) *
[2] = xPos (float), [3] = yPos (float)
* for valid names, check the file names in SimpleAnimationFactory


MOVE ANIMATED OBJECT
--------------------
[0] = objectMove (String), [1] = objectIndex, [2] = targetX, 
[3] = targetY, [4] = duration (int)
* OBS: moving is not an advancable effect, 
  so it should be used in combination with e.g. wait.


CLEAR ANIMATED OBJECTS
--------------------
[0] = clearObjects (string)


END SEQUENCE
--------------------
[0] = endSequence


END CUTSCENE
--------------------
empty line



GENERAL STUFF:
-Each element can have several cutscenes. 
 (That's why we include the elementNr in the cutscene-header, so that we know which element
  the cutscene belongs to).
  .The setStartCutscene-event can be used to change between which cutscenes are started 
  whenever an element is interacted with.
  .This could be in response to certain requirements being met, or a certain infoChoice-option
   being taken.

OBS: I can make an event that changes an npc's inForeground-boolean!


